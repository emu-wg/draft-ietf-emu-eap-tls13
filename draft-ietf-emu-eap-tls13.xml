<?xml version="1.0" ?>
<?xml-stylesheet type='text/xsl'
href='http://xml.resource.org/authoring/rfc2629.xslt' ?>

<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'[] >

<?rfc compact="yes" ?>
<?rfc iprnotified="yes" ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<rfc category="std" ipr="trust200902" docName="draft-ietf-emu-eap-tls13-latest" updates="5216">

<front>

	<title abbrev="EAP-TLS with TLS 1.3">
	Using EAP-TLS with TLS 1.3
	</title>

	<author initials="J." surname="Mattsson" fullname="John PreuÃŸ Mattsson">
		<organization>Ericsson</organization>
		<address>
			<postal>
				<street/>
				<city> Stockholm</city>
				<code>164 40</code>
				<country>Sweden</country>
			</postal>
			<email>john.mattsson@ericsson.com</email>
		</address>
		</author>

	<author initials="M" surname="Sethi" fullname="Mohit Sethi">
		<organization>Ericsson</organization>
		<address>
			<postal>
					<street/>
					<city>Jorvas</city>
					<code>02420</code>
					<country>Finland</country>
			</postal>
			<email>mohit@piuha.net</email>
		</address>
	</author>

	<date />

	<workgroup>Network Working Group</workgroup>

<abstract>
	<t>
	This document specifies the use of EAP-TLS with TLS 1.3 while remaining backwards compatible with existing implementations of EAP-TLS. TLS 1.3 provides significantly improved security, privacy, and reduced latency when compared to earlier versions of TLS. EAP-TLS with TLS 1.3 further improves security and privacy by mandating use of privacy and revocation checking. This document also provides guidance on authorization and resumption for EAP-TLS in general (regardless of the underlying TLS version used). This document updates RFC 5216.
	</t>
</abstract>

</front>

<middle>

<section title='Introduction'>
	<t>The Extensible Authentication Protocol (EAP), defined in <xref target="RFC3748"/>, provides a standard mechanism for support of multiple authentication methods. EAP-Transport Layer Security (EAP-TLS) <xref target="RFC5216"/> specifies an EAP authentication method with certificate-based mutual authentication utilizing the TLS handshake protocol for cryptographic algorithms and protocol version negotiation, mutual authentication, and establishment of shared secret keying material. EAP-TLS is widely supported for authentication and and key establishment in IEEE 802.11 <xref target="IEEE-802.11"/> (Wi-Fi) and IEEE 802.1AE <xref target="IEEE-802.1AE"/> (MACsec) networks using IEEE 802.1X <xref target="IEEE-802.1X"/> and it's the default mechanism for certificate based authentication in 3GPP 5G <xref target="TS.33.501"/> and MulteFire <xref target="MulteFire"/> networks. Many other EAP methods such as EAP-FAST <xref target="RFC4851"/>, EAP-TTLS <xref target="RFC5281"/>, TEAP <xref target="RFC7170"/>, and PEAP <xref target="PEAP"/> depend on TLS and EAP-TLS.</t>

	<t>EAP-TLS <xref target="RFC5216"/> references TLS 1.0 <xref target="RFC2246"/> and TLS 1.1 <xref target="RFC4346"/>, but can also work with TLS 1.2 <xref target="RFC5246"/>. TLS 1.0 and 1.1 are formally deprecated and prohibited to negotiate and use <xref target="I-D.ietf-tls-oldversions-deprecate"/>. Weaknesses found in TLS 1.2, as well as new requirements for security, privacy, and reduced latency has led to the specification of TLS 1.3 <xref target="RFC8446"/>, which obsoletes TLS 1.2 <xref target="RFC5246"/>. TLS 1.3 is in large parts a complete remodeling of the TLS handshake protocol including a different message flow, different handshake messages, different key schedule, different cipher suites, different resumption, different privacy protection, and record padding. This means that significant parts of the normative text in the previous EAP-TLS specification <xref target="RFC5216"/> are not applicable to EAP-TLS with TLS 1.3 (or higher). Therefore, aspects such as resumption, privacy handling, and key derivation need to be appropriately addressed for EAP-TLS with TLS 1.3 (or higher).</t>

	<t>This document defines how to use EAP-TLS with TLS 1.3 (or higher) and does not change how EAP-TLS is used with older versions of TLS. We do however provide additional guidance on authorization and resumption for EAP-TLS in general (regardless of the underlying TLS version used). While this document updates EAP-TLS <xref target="RFC5216"/>, it remains backwards compatible with it and existing implementations of EAP-TLS. This document only describes differences compared to <xref target="RFC5216"/>.</t>

	<t>In addition to the improved security and privacy offered by TLS 1.3, there are other significant benefits of using EAP-TLS with TLS 1.3. Privacy is mandatory and achieved without any additional round-trips, revocation checking is mandatory and simplified with OCSP stapling, and TLS 1.3 introduces more possibilities to reduce fragmentation when compared to earlier versions of TLS.</t>

	<section title='Requirements and Terminology'>
		<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target='RFC2119'/> <xref target='RFC8174'/> when, and only when, they appear in all capitals, as shown here.</t>

		<t>Readers are expected to be familiar with the terms and concepts used in EAP-TLS <xref target="RFC5216"/> and TLS <xref target="RFC8446"/>.</t>
	</section>

</section>


<section title='Protocol Overview'>

	<section title='Overview of the EAP-TLS Conversation'>
			<t>This section updates Section 2.1 of <xref target="RFC5216"/>.</t>

			<t>TLS 1.3 changes both the message flow and the handshake messages compared to earlier versions of TLS. Therefore, much of Section 2.1 of <xref target="RFC5216"/> does not apply for TLS 1.3 (or higher).</t>

			<t>After receiving an EAP-Request packet with EAP-Type=EAP-TLS as described in <xref target="RFC5216"/> the conversation will continue with the TLS handshake protocol encapsulated in the data fields of EAP-Response and EAP-Request packets. When EAP-TLS is used with TLS version 1.3 or higher, the formatting and processing of the TLS handshake SHALL be done as specified in that version of TLS. This document only lists additional and different requirements, restrictions, and processing compared to <xref target="RFC8446"/> and <xref target="RFC5216"/>.</t>


		<section title='Mutual Authentication'>
			<t>This section updates Section 2.1.1 of <xref target="RFC5216"/>.</t>

			<t>The EAP server MUST authenticate with a certificate and SHOULD require the EAP peer to authenticate with a certificate. Certificates can be of any type supported by TLS including raw public keys. Pre-Shared Key (PSK) authentication SHALL NOT be used except for resumption. SessionID is deprecated in TLS 1.3 and the EAP server SHALL ignore the legacy_session_id field if TLS 1.3 is negotiated. TLS 1.3 introduced early application data which is not used in EAP-TLS. A server which receives an "early_data" extension MUST ignore the extension or respond with a HelloRetryRequest as described in Section 4.2.10 of <xref target="RFC8446"/>. Resumption is handled as described in <xref target="resumption"/>. After the TLS handshake has completed and all Post-Handshake messages have been sent, the EAP server sends EAP-Success.</t>

			<t>In the case where EAP-TLS with mutual authentication is successful (and neither HelloRetryRequest nor Post-Handshake messages are sent) the conversation will appear as shown in <xref target="figbase1"/>. The EAP server commits to not send any more handshake messages by sending a Commitment Message (a TLS record with the application data 0x00), see <xref target="state"/>.</t>

<figure anchor="figbase1" title="EAP-TLS mutual authentication" align="center"><artwork><![CDATA[
 EAP Peer                                              EAP Server

                                                      EAP-Request/
                              <--------                  Identity
 EAP-Response/
 Identity (Privacy-Friendly)  -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------                (TLS Start)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                                 (TLS ServerHello,
                                          TLS EncryptedExtensions,
                                           TLS CertificateRequest,
                                                  TLS Certificate,
                                            TLS CertificateVerify,
                                                     TLS Finished,
                              <--------        Commitment Message)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS Certificate,
 TLS CertificateVerify,
 TLS Finished)                -------->
                              <--------               EAP-Success
]]></artwork></figure>
	   </section>

		<section title='Ticket Establishment' anchor="ticket">
			<t>This is a new section when compared to <xref target="RFC5216"/>.</t>

			<t>To enable resumption when using EAP-TLS with TLS 1.3, the EAP server MUST send a NewSessionTicket message (containing a PSK and other parameters) in the initial authentication. The NewSessionTicket is sent after the EAP server has received the Finished message in the initial authentication. The NewSessionTicket message MUST NOT include an "early_data" extension.</t>

			<t>In the case where EAP-TLS with mutual authentication and ticket establishment is successful, the conversation will appear as shown in <xref target="figbase2"/>.</t>

<figure anchor="figbase2" title="EAP-TLS ticket establishment" align="center"><artwork><![CDATA[
 EAP Peer                                              EAP Server

                                                      EAP-Request/
                              <--------                  Identity
 EAP-Response/
 Identity (Privacy-Friendly)  -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------                (TLS Start)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                                 (TLS ServerHello,
                                          TLS EncryptedExtensions,
                                           TLS CertificateRequest,
                                                  TLS Certificate,
                                            TLS CertificateVerify,
                              <--------              TLS Finished)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS Certificate,
 TLS CertificateVerify,
 TLS Finished)                -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                            (TLS NewSessionTicket,
                              <--------        Commitment Message)
 EAP-Response/
 EAP-Type=EAP-TLS             -------->
                              <--------               EAP-Success
]]></artwork></figure>	
		</section>			

		<section title="Resumption" anchor="resumption">
			<t>This section updates Section 2.1.2 of <xref target="RFC5216"/>.</t>

			<t>TLS 1.3 replaces the session resumption mechanisms in earlier versions of TLS with a new PSK exchange. When EAP-TLS is used with TLS version 1.3 or higher, EAP-TLS SHALL use a resumption mechanism compatible with that version of TLS.</t>

			<t>For TLS 1.3, resumption is described in Section 2.2 of <xref target="RFC8446"/>. If the client has received a NewSessionTicket message from the server, the client can use the PSK identity received in the ticket to negotiate the use of the associated PSK. If the server accepts it, then the security context of the new connection is tied to the original connection and the key derived from the initial handshake is used to bootstrap the cryptographic state instead of a full handshake. It is left up to the EAP peer whether to use resumption, but it is RECOMMENDED that the EAP server accept resumption as long as the ticket is valid. However, the server MAY choose to require a full authentication. EAP peers and EAP servers SHOULD follow the client tracking preventions in Appendix C.4 of <xref target="RFC8446"/>.</t>

			<t>It is RECOMMENDED to use a NAIs with the same realm in the resumption and the original full authentication. This requirement allows EAP packets to be routable to the same destination as the original full authentication. If this recommendation is not followed, resumption is likely to be impossible. When NAI reuse can be done without privacy implications, it is RECOMMENDED to use the same anonymous NAI in the resumption, as was used in the original full authentication. E.g. the NAI @realm can safely be reused, while the NAI ZmxleG8=@realm cannot. The TLS PSK identity is typically derived by the TLS implementation and may be an opaque blob without a routable realm. The TLS PSK identity is therefore in general unsuitable for deriving a NAI to use in the Identity Response.</t>
			
			<t>A subsequent authentication using resumption, where both sides authenticate successfully (without the issuance of more resumption tickets) is shown in <xref target="figresumption"/>.</t>

<figure anchor="figresumption" title="EAP-TLS resumption" align="center"><artwork><![CDATA[
 EAP Peer                                              EAP Server

                                                      EAP-Request/
                              <--------                  Identity
 EAP-Response/
 Identity (Privacy-Friendly)  -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------                (TLS Start)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                                 (TLS ServerHello,
                                          TLS EncryptedExtensions,
                                                     TLS Finished,
                              <--------        Commitment Message)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS Finished)                -------->
                              <--------               EAP-Success
]]></artwork></figure>

			<t>As specified in Section 2.2 of <xref target="RFC8446"/>, the EAP peer SHOULD supply a "key_share" extension when attempting resumption, which allows the EAP server to potentially decline resumption and fall back to a full handshake. If the EAP peer did not supply a "key_share" extension when attempting resumption, the EAP server needs to reject the ClientHello and the EAP peer needs to restart a full handshake. The message flow in this case is given by <xref target="figterm1"/> followed by <xref target="figbase1"/>.</t>

			<t>Also during resumption, the server can respond with a Hello Retry Request (see <xref target="helloretry"/>) or issue a new ticket (see <xref target="ticket"/>)</t>
		</section>

		<section title='Termination'>
			<t>This section updates Section 2.1.3 of <xref target="RFC5216"/>.</t>

			<t>TLS 1.3 changes both the message flow and the handshake messages compared to earlier versions of TLS. Therefore, some normative text in Section 2.1.3 of <xref target="RFC5216"/> does not apply for TLS 1.3 or higher. The two paragraphs below replaces the corresponding paragraphs in Section 2.1.3 of <xref target="RFC5216"/> when EAP-TLS is used with TLS 1.3 or higher. The other paragraphs in Section 2.1.3 of <xref target="RFC5216"/> still apply with the exception that SessionID is deprecated.
			<list>
				<t>If the EAP peer authenticates successfully, the EAP server MUST send an EAP-Request packet with EAP-Type=EAP-TLS containing TLS records conforming to the version of TLS used. The message flow ends with the EAP server sending an EAP-Success message.</t>

				<t>If the EAP server authenticates successfully, the EAP peer MUST send an EAP-Response message with EAP-Type=EAP-TLS containing TLS records conforming to the version of TLS used.</t>
			</list>
			</t>

			<t>Figures <xref target="figterm1" format="counter"/>, <xref target="figterm2" format="counter"/>, and <xref target="figterm3" format="counter"/> illustrate message flows in several cases where the EAP peer or EAP server sends a TLS fatal alert message. TLS warning alerts generally mean that the connection can continue normally and does not change the message flow. Note that the party receiving a TLS warning alert may choose to terminate the connection by sending a TLS fatal alert, which may add an extra round-trip, see <xref target="RFC8446"/>. </t>
			
			<t>In the case where the server rejects the ClientHello with a fatal error, the conversation will appear as shown in <xref target="figterm1"/>. The server can also partly reject the ClientHello with a HelloRetryRequest, see <xref target="helloretry"/>.</t>

<figure anchor="figterm1" title="EAP-TLS server rejection of ClientHello" align="center"><artwork><![CDATA[
 EAP Peer                                              EAP Server

                                                      EAP-Request/
                              <--------                  Identity
 EAP-Response/
 Identity (Privacy-Friendly)  -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------                (TLS Start)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------          (TLS Fatal Alert)
 EAP-Response/
 EAP-Type=EAP-TLS             -------->
                              <--------               EAP-Failure
]]></artwork></figure>

			<t>
			In the case where server authentication is unsuccessful, the conversation will appear as shown in <xref target="figterm2"/>.
			</t>

<figure anchor="figterm2" title="EAP-TLS unsuccessful server authentication" align="center"><artwork><![CDATA[
 EAP Peer                                              EAP Server

                                                      EAP-Request/
                              <--------                  Identity
 EAP-Response/
 Identity (Privacy-Friendly)  -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------                (TLS Start)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                                 (TLS ServerHello,
                                          TLS EncryptedExtensions,
                                           TLS CertificateRequest,
                                                  TLS Certificate,
                                            TLS CertificateVerify,
                                                     TLS Finished,
                              <--------        Commitment Message)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS Fatal Alert)
                              -------->
                              <--------               EAP-Failure
]]></artwork></figure>

			<t>In the case where the server authenticates to the peer successfully, but the peer fails to authenticate to the server, the conversation will appear as shown in <xref target="figterm3"/>.</t>

<figure anchor="figterm3" title="EAP-TLS unsuccessful client authentication" align="center"><artwork><![CDATA[
 EAP Peer                                              EAP Server

                                                      EAP-Request/
                              <--------                  Identity
 EAP-Response/
 Identity (Privacy-Friendly)  -------->

                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------                (TLS Start)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                                 (TLS ServerHello,
                                          TLS EncryptedExtensions,
                                           TLS CertificateRequest,
                                                  TLS Certificate,
                                            TLS CertificateVerify,
                                                     TLS Finished,
                              <--------        Commitment Message)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS Certificate,
 TLS CertificateVerify,
 TLS Finished)                -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------          (TLS Fatal Alert)
 EAP-Response/
 EAP-Type=EAP-TLS             -------->
                              <--------               EAP-Failure
]]></artwork></figure>
			
		</section>

		<section title='No Peer Authentication'>
			<t>This is a new section when compared to <xref target="RFC5216"/>.</t>

			<t>In the case where EAP-TLS is used without peer authentication (e.g., emergency services, as described in <xref target="RFC7406"/>) the conversation will appear as shown in <xref target="figbase3"/>.</t>

<figure anchor="figbase3" title="EAP-TLS without peer authentication" align="center"><artwork><![CDATA[
 EAP Peer                                              EAP Server

                                                      EAP-Request/
                              <--------                  Identity
 EAP-Response/
 Identity (Privacy-Friendly)  -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------                (TLS Start)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                                 (TLS ServerHello,
                                          TLS EncryptedExtensions,
                                                  TLS Certificate,
                                            TLS CertificateVerify,
                                                     TLS Finished,
                              <--------        Commitment Message)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS Finished)                -------->
                              <--------               EAP-Success
]]></artwork></figure>
		</section>			

		<section title="Hello Retry Request" anchor="helloretry">
			<t>This is a new section when compared to <xref target="RFC5216"/>.</t>

			<t>TLS 1.3 <xref target="RFC8446"/> defines that TLS servers can send a HelloRetryRequest message in response to a ClientHello if the server finds an acceptable set of parameters but the initial ClientHello does not contain all the needed information to continue the handshake. One use case is if the server does not support the groups in the "key_share" extension, but supports one of the groups in the "supported_groups" extension. In this case the client should send a new ClientHello with a "key_share" that the server supports.</t>

			<t>The case of a successful EAP-TLS mutual authentication after the server has sent a HelloRetryRequest message is shown in <xref target="fighelloretryrequest"/>. Note the extra round-trip as a result of the HelloRetryRequest.</t>

<figure anchor="fighelloretryrequest" title="EAP-TLS with Hello Retry Request" align="center"><artwork><![CDATA[
 EAP Peer                                              EAP Server

                                                      EAP-Request/
                              <--------                  Identity
 EAP-Response/
 Identity (Privacy-Friendly)  -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------                (TLS Start)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                           (TLS HelloRetryRequest)
                              <--------
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                                 (TLS ServerHello,
                                          TLS EncryptedExtensions,
                                                  TLS Certificate,
                                            TLS CertificateVerify,
                                                     TLS Finished,
                              <--------        Commitment Message)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS Certificate,
 TLS CertificateVerify,
 TLS Finished)                -------->
                              <--------               EAP-Success
]]></artwork></figure>
	   </section>


		<section title='Identity'>
			<t>This is a new section when compared to <xref target="RFC5216"/>.</t>

			<t>It is RECOMMENDED to use anonymous NAIs <xref target="RFC7542"/> in the Identity Response as such identities are routable and privacy-friendly. While opaque blobs are allowed by <xref target="RFC3748"/>, such identities are NOT RECOMMENDED as they are not routable and should only be considered in local deployments where the EAP peer, EAP authenticator, and EAP server all belong to the same network. Many client certificates contains an identity such as an email address, which is already in NAI format. When the client certificate contains a NAI as subject name or alternative subject name, an anonymous NAI SHOULD be derived from the NAI in the certificate, see <xref target="privacy"/>. More details on identities are described in Sections <xref target="resumption" format="counter"/>, <xref target="privacy" format="counter"/>, <xref target="identity" format="counter"/>, and <xref target="privcon" format="counter"/>.</t>
		</section>

		<section title="Privacy" anchor="privacy">
			<t>This section updates Section 2.1.4 of <xref target="RFC5216"/>.</t>

			<t>TLS 1.3 significantly improves privacy when compared to earlier versions of TLS by forbidding cipher suites without confidentiality and encrypting large parts of the TLS handshake including the certificate messages.</t>

			<t>EAP-TLS peer and server implementations supporting TLS 1.3 or higher MUST support anonymous NAIs (Network Access Identifiers) (Section 2.4 in <xref target="RFC7542"/>) and a client supporting TLS 1.3 MUST NOT send its username in cleartext in the Identity Response. Following <xref target="RFC7542"/>, it is RECOMMENDED to omit the username (i.e. the NAI is @realm), but other constructions such as a fixed username (e.g. anonymous@realm) or an encrypted username (e.g. YmVuZGVy@realm) are allowed. Note that the NAI MUST be a UTF-8 string as defined by the grammar in Section 2.2 of <xref target="RFC7542"/>.</t>

			<t>As the certificate messages in TLS 1.3 are encrypted, there is no need to send an empty certificate_list and perform a second handshake for privacy (as needed by EAP-TLS with earlier versions of TLS). When EAP-TLS is used with TLS version 1.3 or higher the EAP-TLS peer and EAP-TLS server SHALL follow the processing specified by the used version of TLS. For TLS 1.3 this means that the EAP-TLS peer only sends an empty certificate_list if it does not have an appropriate certificate to send, and the EAP-TLS server MAY treat an empty certificate_list as a terminal condition.</t>

			<t>EAP-TLS with TLS 1.3 is always used with privacy. This does not add any extra round-trips and the message flow with privacy is just the normal message flow as shown in <xref target="figbase1"/>.</t>

		</section>

		<section title='Fragmentation'>
			<t>This section updates Section 2.1.5 of <xref target="RFC5216"/>.</t>			

			<t>Including ContentType and ProtocolVersion a single TLS record may be up to 16387 octets in length. EAP-TLS fragmentation support is provided through addition of a flags octet within the EAP-Response and EAP-Request packets, as well as a TLS Message Length field of four octets. Implementations MUST NOT set the L bit in unfragmented messages, but MUST accept unfragmented messages with and without the L bit set.</t>

			 <t>Some EAP implementations and access networks may limit the number of EAP packet exchanges that can be handled. To avoid fragmentation, it is RECOMMENDED to keep the sizes of client, server, and trust anchor certificates small and the length of the certificate chains short. In addition, it is RECOMMENDED to use mechanisms that reduce the sizes of Certificate messages.</t>

			 <t>While Elliptic Curve Cryptography (ECC) was optional for earlier version of TLS, TLS 1.3 mandates support of ECC (see Section 9 of <xref target="RFC8446"/>). To avoid fragmentation, the use of ECC in certificates, signature algorithms, and groups are RECOMMENDED when using EAP-TLS with TLS 1.3 or higher. At a 128-bit security level, this reduces public key sizes from 384 bytes (RSA and DHE) to 32-64 bytes (ECDHE) and signatures from 384 bytes (RSA) to 64 bytes (ECDSA and EdDSA). An EAP-TLS deployment MAY further reduce the certificate sizes by limiting the number of Subject Alternative Names.</t>

			 <t>Endpoints SHOULD reduce the sizes of Certificate messages by omitting certificates that the other endpoint is known to possess. When using TLS 1.3, all certificates that specifies a trust anchor may be omitted (see Section 4.4.2 of <xref target="RFC8446"/>). When using TLS 1.2, only the self-signed certificate that specifies the root certificate authority may be omitted (see Section 7.4.2 of <xref target="RFC5246"/>). EAP-TLS peers and servers SHOULD support and use the Cached Information Extension as specified in <xref target="RFC7924"/>. EAP-TLS peers and servers MAY use other extensions for reducing the sizes of Certificate messages, e.g. certificate compression <xref target="I-D.ietf-tls-certificate-compression"/>.</t>

		 	<t>For a detailed discussion on reducing message sizes to prevent fragmentation, see <xref target="I-D.ietf-emu-eaptlscert"/>.</t>
		</section>

	</section>

	<section title='Identity Verification' anchor="identity">
		<t>This section updates Section 2.2 of <xref target="RFC5216"/>.</t>

		<t>The identity provided in the EAP-Response/Identity is not authenticated by EAP-TLS. Unauthenticated information SHALL NOT be used for accounting purposes or to give authorization. The authenticator and the EAP server MAY examine the identity presented in EAP-Response/Identity for purposes such as routing and EAP method selection. Servers MAY reject conversations if the identity does not match their policy. Note that this also applies to resumption, see Sections <xref target="resumption" format="counter"/>, <xref target="secauth" format="counter"/>, and <xref target="secres" format="counter"/>.</t>

	</section>

	<section title='Key Hierarchy' anchor="keyheirarchy">
		<t>This section updates Section 2.3 of <xref target="RFC5216"/>.</t>

		<t>TLS 1.3 replaces the TLS pseudorandom function (PRF) used in earlier versions of TLS with HKDF and completely changes the Key Schedule. The key hierarchies shown in Section 2.3 of <xref target="RFC5216"/> are therefore not correct when EAP-TLS is used with TLS version 1.3 or higher. For TLS 1.3 the key schedule is described in Section 7.1 of <xref target="RFC8446"/>.</t>

		<t>When EAP-TLS is used with TLS version 1.3 or higher the Key_Material, IV, and Method-Id SHALL be derived from the exporter_master_secret using the TLS exporter interface <xref target="RFC5705"/> (for TLS 1.3 this is defined in Section 7.5 of <xref target="RFC8446"/>).</t>

<figure><artwork><![CDATA[
Type-Code    = 0x0D
Key_Material = TLS-Exporter("EXPORTER_EAP_TLS_Key_Material",
                            Type-Code, 128)
IV           = TLS-Exporter("EXPORTER_EAP_TLS_IV",
                            Type-Code, 64)
Method-Id    = TLS-Exporter("EXPORTER_EAP_TLS_Method-Id",
                            Type-Code, 64)
Session-Id   = Type-Code || Method-Id
]]></artwork></figure>

		<t>All other parameters such as MSK and EMSK are derived in the same manner as with EAP-TLS <xref target="RFC5216"/>, Section 2.3. The definitions are repeated below for simplicity:</t>

<figure><artwork><![CDATA[
MSK          = Key_Material(0, 63)
EMSK         = Key_Material(64, 127)
Enc-RECV-Key = MSK(0, 31)
Enc-SEND-Key = MSK(32, 63)
RECV-IV      = IV(0, 31)
SEND-IV      = IV(32, 63)
]]></artwork></figure>

		<t>The use of these keys is specific to the lower layer, as described <xref target="RFC5247"/>.</t>

		<t>Note that the key derivation MUST use the length values given above. While in TLS 1.2 and earlier it was possible to truncate the output by requesting less data from the TLS-Exporter function, this practice is not possible with TLS 1.3. If an implementation intends to use only a part of the output of the TLS-Exporter function, then it MUST ask for the full output and then only use the desired part. Failure to do so will result in incorrect values being calculated for the above keying material.</t>

		<t>By using the TLS exporter, EAP-TLS can use any TLS 1.3 implementation without having to extract the Master Secret, ClientHello.random, and ServerHello.random in a non-standard way.</t>

	</section>

	<section title='Parameter Negotiation and Compliance Requirements'>
		<t>This section updates Section 2.4 of <xref target="RFC5216"/>.</t>

		<t>TLS 1.3 cipher suites are defined differently than in earlier versions of TLS (see Section B.4 of <xref target="RFC8446"/>), and the cipher suites discussed in Section 2.4 of <xref target="RFC5216"/> can therefore not be used when EAP-TLS is used with TLS version 1.3 or higher.</t>

		<t>When EAP-TLS is used with TLS version 1.3 or higher, the EAP-TLS peers and servers MUST comply with the compliance requirements (mandatory-to-implement cipher suites, signature algorithms, key exchange algorithms, extensions, etc.) for the TLS version used. For TLS 1.3 the compliance requirements are defined in Section 9 of <xref target="RFC8446"/>.</t>
		
		<t>While EAP-TLS does not protect any application data, the negotiated cipher suites and algorithms MAY be used to secure data as done in other TLS-based EAP methods.</t>
		
	</section>

	<section title='EAP State Machines' anchor="state">
		<t>This is a new section when compared to <xref target="RFC5216"/>.</t>

		<t>TLS 1.3 <xref target="RFC8446"/> introduces Post-Handshake messages. These Post-Handshake messages use the handshake content type and can be sent after the main handshake. One such Post-Handshake message is NewSessionTicket. The NewSessionTicket can be used for resumption. After sending TLS Finished, the EAP server may send any number of Post-Handshake messages in separate EAP-Requests. To decrease the uncertainty for the EAP peer, the following procedure MUST be followed:</t>

		<t>When an EAP server has sent its last handshake message (Finished or a Post-Handshake), it commits to not sending any more handshake messages by sending a Commitment Message. The Commitment Message is an encrypted TLS record with application data 0x00 (i.e. a TLS record with TLSPlaintext.type = application_data, TLSPlaintext.length = 1, and TLSPlaintext.fragment = 0x00). Note that the length of the plaintext is greater than the corresponding TLSPlaintext.length due to the inclusion of TLSInnerPlaintext.type and any padding supplied by the sender. EAP server implementations MUST set TLSPlaintext.fragment to 0x00, but EAP peer implementations MUST accept any application data as a Commitment Message from the EAP server to not send any more handshake messages. The Commitment Message may be sent in the same EAP-Request as the last handshake record or in a separate EAP-Request. Sending the Commitment Message in a separate EAP-Request adds an additional round-trip, but may be necessary in TLS implementations that only implement a subset of TLS 1.3. In the case where the server sends the Commitment Message in a separate EAP-Request, the conversation will appear as shown in <xref target="figsepcommit"/>. After sending the Commitment Message, the EAP server may only send an EAP-Success, an EAP-Failure, or an EAP-Request with a TLS Alert Message.</t>
		<figure anchor="figsepcommit" title="Commit in separate EAP-Request" align="center"><artwork><![CDATA[
 EAP Peer                                              EAP Server
                                                      EAP-Request/
                              <--------                  Identity
 EAP-Response/
 Identity (Privacy-Friendly)  -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------                (TLS Start)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS ClientHello)             -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                                                 (TLS ServerHello,
                                          TLS EncryptedExtensions,
                                           TLS CertificateRequest,
                                                  TLS Certificate,
                                            TLS CertificateVerify,
                              <--------              TLS Finished)
 EAP-Response/
 EAP-Type=EAP-TLS
(TLS Certificate,
 TLS CertificateVerify,
 TLS Finished)                -------->
                                                      EAP-Request/
                                                 EAP-Type=EAP-TLS
                              <--------        Commitment Message)
 EAP-Response/
 EAP-Type=EAP-TLS             -------->
                              <--------               EAP-Success
]]></artwork></figure>
	</section>

</section>

<section title='Detailed Description of the EAP-TLS Protocol'>
	<t>
	No updates to Section 3 of <xref target="RFC5216"/>.
	</t>
</section>


<section title='IANA considerations'>
	
	<t>This section provides guidance to the Internet Assigned Numbers Authority (IANA) regarding registration of values related to the EAP-TLS 1.3 protocol in accordance with <xref target="RFC8126"/>.</t>

	<t>This memo requires IANA to add the following labels to the TLS Exporter Label Registry defined by <xref target="RFC5705"/>. These labels are used in derivation of Key_Material, IV and Method-Id as defined in <xref target="keyheirarchy"/>:
		<list style="symbols">
		    <t>"EXPORTER_EAP_TLS_Key_Material"</t>
		    <t>"EXPORTER_EAP_TLS_IV"</t>
		    <t>"EXPORTER_EAP_TLS_Method-Id"</t>
		</list>
	</t>

</section>

<section title='Security Considerations' anchor="seccon">

	<section title="Security Claims">

		<t>Using EAP-TLS with TLS 1.3 does not change the security claims for EAP-TLS as given in Section 5.1 of <xref target="RFC5216"/>. However, it strengthens several of the claims as described in the following updates to the notes given in Section 5.1 of <xref target="RFC5216"/>.</t>

		<t>[1] Mutual authentication: By mandating revocation checking of certificates, the authentication in EAP-TLS with TLS 1.3 is stronger as authentication with revoked certificates will always fail.</t>
					
		<t>[2] Confidentiality: The TLS 1.3 handshake offers much better confidentiality than earlier versions of TLS by mandating cipher suites with confidentiality and encrypting certificates and some of the extensions, see <xref target="RFC8446"/>. When using EAP-TLS with TLS 1.3, the use of privacy is mandatory and does not cause any additional round-trips.</t>

		<t>[3] Key strength: TLS 1.3 forbids all algorithms with known weaknesses including 3DES, CBC mode, RC4, SHA-1, and MD5. TLS 1.3 only supports cryptographic algorithms offering at least 112-bit security, see <xref target="RFC8446"/>.</t>

		<t>[4] Cryptographic Negotiation: TLS 1.3 increases the number of cryptographic parameters that are negotiated in the handshake. When EAP-TLS is used with TLS 1.3, EAP-TLS inherits the cryptographic negotiation of AEAD algorithm, HKDF hash algorithm, key exchange groups, and signature algorithm, see Section 4.1.1 of <xref target="RFC8446"/>.</t>
	</section>

	<section title="Peer and Server Identities">
		
		<t>No updates to section 5.2 of <xref target="RFC5216"/>.</t>

	</section>

	<section title="Certificate Validation">
		
		<t>No updates to section 5.3 of <xref target="RFC5216"/>.</t>

	</section>

	<section title="Certificate Revocation">
		<t>This section updates Section 5.4 of <xref target="RFC5216"/>.</t>

		<t>While certificates may have long validity periods, there are a number of reasons (e.g. key compromise, CA compromise, privilege withdrawn, etc.) why client, server, or sub-CA certificates have to be revoked before their expiry date. Revocation of the EAP serverâ€™s certificate is complicated by the fact that the EAP peer may not have Internet connectivity until authentication completes.</t>

		<t>EAP-TLS servers supporting TLS 1.3 MUST implement Certificate Status Requests (OCSP stapling) as specified in <xref target="RFC6066"/> and Section 4.4.2.1 of <xref target="RFC8446"/>. It is RECOMMENDED that EAP-TLS peers and servers use OCSP stapling for verifying the status of server certificates. When an EAP-TLS peer uses OCSP to verify the certificate status of the EAP-TLS server, it MUST use Certificate Status Requests for the server's certificate chain and it MUST treat a CertificateEntry (except the trust anchor) without a valid CertificateStatus extension as invalid and abort the handshake with an appropriate alert.</t>

		<t>The OCSP status handling in TLS 1.3 is different from earlier versions of TLS, see Section 4.4.2.1 of <xref target="RFC8446"/>. In TLS 1.3 the OCSP information is carried in the CertificateEntry containing the associated certificate instead of a separate CertificateStatus message as in <xref target="RFC4366"/>. This enables sending OCSP information for all certificates in the certificate chain.</t>

		<t>To enable revocation checking in situations where peers do not implement or use OCSP stapling, and where network connectivity is not available prior to authentication completion, peer implementations MUST also support checking for certificate revocation after authentication completes and network connectivity is available, and they SHOULD utilize this capability by default.</t>	

		<t>When EAP-TLS is used with TLS 1.3, the server MUST check the revocation status of the certificates in the clientâ€™s certificate chain.</t>
	</section>

	<section title="Packet Modification Attacks">
		
		<t>No updates to Section 5.5 of <xref target="RFC5216"/>.</t>

	</section>
	
	<section title="Authorization" anchor="secauth">
		<t>This is a new section when compared to <xref target="RFC5216"/>. The guidance in this section is relevant for EAP-TLS in general (regardless of the underlying TLS version used).</t>

		<t>EAP-TLS is typically encapsulated in other protocols, such as PPP <xref target="RFC1661"/>, RADIUS <xref target="RFC2865"/>, Diameter <xref target="RFC6733"/>, or PANA <xref target="RFC5191"/>. The encapsulating protocols can also provide additional, non-EAP information to an EAP server. This information can include, but is not limited to, information about the authenticator, information about the EAP peer, or information about the protocol layers above or below EAP (MAC addresses, IP addresses, port numbers, WiFi SSID, etc.). Servers implementing EAP-TLS inside those protocols can make policy decisions and enforce authorization based on a combination of information from the EAP-TLS exchange and non-EAP information.</t>

		<t>As noted in <xref target="identity"/>, the identity presented in EAP-Response/Identity is not authenticated by EAP-TLS and is therefore trivial for an attacker to forge, modify, or replay. Authorization and accounting MUST be based on authenticated information such as information in the certificate or the PSK identity and cached data provisioned for resumption as described in <xref target="secres"/>. Note that the requirements for Network Access Identifiers (NAIs) specified in Section 4 of <xref target="RFC7542"/> still apply and MUST be followed. </t>

		<t>EAP-TLS servers MAY reject conversations based on non-EAP information provided by the encapsulating protocol, for example, if the MAC address of the authenticator does not match the expected policy.</t>
		
	</section>	

	<section title="Resumption" anchor="secres">
		<t>This is a new section when compared to <xref target="RFC5216"/>. The guidance in this section is relevant for EAP-TLS in general (regardless of the underlying TLS version used).</t>

		<t>There are a number of security issues related to resumption that are not described in <xref target="RFC5216"/>. The problems, guidelines, and requirements in this section therefore applies to all version of TLS.</t>

		<t>When resumption occurs, it is based on cached information at the TLS layer. To perform resumption in a secure way, the EAP-TLS peer and EAP-TLS server need to be able to securely retrieve authorization information such as certificate chains from the initial full handshake. We use the term "cached data" to describe such information. Authorization during resumption MUST be based on such cached data. The EAP peer and server MAY perform fresh revocation checks on the cached certificate data. Any security policies for authorization MUST be followed also for resumption. The certificates may have been revoked since the initial full handshake and the authorizations of the other party may have been reduced. If the cached revocation is not sufficiently current, the EAP Peer or EAP Server MAY force a full TLS handshake.</t>

		<t>There are two ways to retrieve the cached data from the original full handshake. The first method is that the TLS server and client cache the information locally. The cached information is identified by an identifier. For TLS versions before 1.3, the identifier can be the session ID, for TLS 1.3, the identifier is the PSK identity. The second method for retrieving cached information is via <xref target="RFC5077"/> or <xref target="RFC8446"/>, where the TLS server avoids storing information locally and instead encapsulates the information into a ticket or PSK which is sent to the client for storage. This ticket or PSK is encrypted using a key that only the server knows. Note that the client still needs to cache the original handshake information locally and will use the session ID or PSK identity to lookup this information during resumption. However, the server is able to decrypt the ticket or PSK to obtain the original handshake information.</t>

		<t>If the EAP server or EAP client do not apply any authorization policies, they MAY allow resumption where no cached data is available. In all other cases, they MUST cache data during the initial full authentication to enable resumption. The cached data MUST be sufficient to make authorization decisions during resumption. If cached data cannot be retrieved in a secure way, resumption MUST NOT be done.</t>

		<t>The above requirements also apply if the EAP server expects some system to perform accounting for the session. Since accounting must be tied to an authenticated identity, and resumption does not supply such an identity, accounting is impossible without access to cached data. Therefore systems which expect to perform accounting for the session SHOULD cache an identifier which can be used in subsequent accounting.</t>

		<t>As suggested in <xref target="RFC8446"/>, peers MUST NOT store resumption PSKs or tickets (and associated cached data) for longer than 7 days, regardless of the PSK or ticket lifetime. The peer MAY delete them earlier based on local policy. The cached data MAY also be removed on the server or peer if any certificate in the certificate chain has been revoked or has expired. In all such cases, resumption results in a full TLS handshake instead.</t>

		<t>Information from the EAP-TLS exchange (e.g. the identity provided in EAP-Response/Identity) as well as non-EAP information (e.g. IP addresses) may change between the initial full handshake and resumption. This change creates a "time-of-check time-of-use" (TOCTOU) security vulnerability. A malicious or compromised user could supply one set of data during the initial authentication, and a different set of data during resumption, potentially allowing them to obtain access that they should not have.</t>

		<t>If any authorization, accounting, or policy decisions were made with information that have changed between the initial full handshake and resumption, and if change may lead to a different decision, such decisions MUST be reevaluated. It is RECOMMENDED that authorization, accounting, and policy decisions are reevaluated based on the information given in the resumption. EAP servers MAY reject resumption where the information supplied during resumption does not match the information supplied during the original authentication. Where a good decision is unclear, EAP servers SHOULD reject the resumption.</t>

		<t>Section 4.2.11, 8.1, and 8.2 of <xref target="RFC8446"/> provides security considerations for resumption.</t>

	</section>

	<section title="Privacy Considerations" anchor="privcon">
		<t>This is a new section when compared to <xref target="RFC5216"/>.</t>
		
		<t>TLS 1.3 offers much better privacy than earlier versions of TLS as discussed in <xref target="privacy"/>. In this section, we only discuss the privacy properties of EAP-TLS with TLS 1.3. For privacy properties of TLS 1.3 itself, see <xref target="RFC8446"/>.</t>

		<t>EAP-TLS sends the standard TLS 1.3 handshake messages encapsulated in EAP packets. Additionally, the EAP peer sends an identity in the first EAP-Response. The other fields in the EAP-TLS Request and the EAP-TLS Response packets do not contain any cleartext privacy sensitive information.</t>

		<t>Tracking of users by eavesdropping on identity responses or certificates is a well-known problem in many EAP methods. When EAP-TLS is used with TLS 1.3, all certificates are encrypted, and the username part of the identity response is always confidentiality protected (e.g. using anonymous NAIs). However, as with other EAP methods, even when privacy-friendly identifiers or EAP tunneling is used, the domain name (i.e. the realm) in the NAI is still typically visible. How much privacy sensitive information the domain name leaks is highly dependent on how many other users are using the same domain name in the particular access network. If all EAP peers have the same domain, no additional information is leaked. If a domain name is used by a small subset of the EAP peers, it may aid an attacker in tracking or identifying the user.</t>

		<t>Without padding, information about the size of the client certificate is leaked from the size of the EAP-TLS packets. The EAP-TLS packets sizes may therefore leak information that can be used to track or identify the user. If all client certificates have the same length, no information is leaked. EAP peers SHOULD use record padding, see Section 5.4 of <xref target="RFC8446"/> to reduce information leakage of certificate sizes.</t>

		<t>If anonymous NAIs are not used, the privacy-friendly identifiers need to be generated with care. The identities MUST be generated in a cryptographically secure way so that that it is computationally infeasible for an attacker to differentiate two identities belonging to the same user from two identities belonging to different users in the same realm. This can be achieved, for instance, by using random or pseudo-random usernames such as random byte strings or ciphertexts and only using the pseudo-random usernames a single time. Note that the privacy-friendly usernames also MUST NOT include substrings that can be used to relate the identity to a specific user. Similarly, privacy-friendly username SHOULD NOT be formed by a fixed mapping that stays the same across multiple different authentications.</t>

		<t>An EAP peer with a policy allowing communication with EAP servers supporting only TLS 1.2 without privacy and with a static RSA key exchange is vulnerable to disclosure of the peer username. An active attacker can in this case make the EAP peer believe that an EAP server supporting TLS 1.3 only supports TLS 1.2 without privacy. The attacker can simply impersonate the EAP server and negotiate TLS 1.2 with static RSA key exchange and send an TLS alert message when the EAP peer tries to use privacy by sending an empty certificate message. Since the attacker (impersonating the EAP server) does not provide a proof-of-possession of the private key until the Finished message when a static RSA key exchange is used, an EAP peer may inadvertently disclose its identity (username) to an attacker. Therefore, it is RECOMMENDED for EAP peers to not use EAP-TLS with TLS 1.2 and static RSA based cipher suites without privacy. This implies that an EAP peer SHOULD NOT continue the handshake if a TLS 1.2 EAP server responds to an empty certificate message with a TLS alert message.</t>
		
	</section>

	<section title="Pervasive Monitoring">
		<t>This is a new section when compared to <xref target="RFC5216"/>.</t>

		<t>Pervasive monitoring refers to widespread surveillance of users. In the context EAP-TLS, pervasive monitoring attacks can target peer devices for tracking them (and their users) as and when they join a network. By encrypting more information and by mandating the use of privacy, TLS 1.3 offers much better protection against pervasive monitoring. In addition to the privacy attacks discussed above, surveillance on a large scale may enable tracking of a user over a wider geographical area and across different access networks. Using information from EAP-TLS together with information gathered from other protocols increases the risk of identifying individual users.</t>
	
	</section>
	
	<section title="Discovered Vulnerabilities">
		<t>This is a new section when compared to <xref target="RFC5216"/>.</t>

		<t>Over the years, there have been several serious attacks on earlier versions of Transport Layer Security (TLS), including attacks on its most commonly used ciphers and modes of operation. <xref target="RFC7457"/> summarizes the attacks that were known at the time of publishing and <xref target="RFC7525"/> provides recommendations for improving the security of deployed services that use TLS. However, many of the attacks are less serious for EAP-TLS as EAP-TLS only uses the TLS handshake and does not protect any application data. EAP-TLS implementations SHOULD mitigate known attacks and follow the recommendations in <xref target="RFC7525"/> and <xref target="I-D.ietf-tls-oldversions-deprecate"/>. The use of TLS 1.3 mitigates most of the known attacks.</t>

	</section>

</section>

</middle>

<back>

<references title='Normative References'>
	<?rfc include='reference.RFC.2119'?>
	<?rfc include='reference.RFC.3748'?>
	<?rfc include='reference.RFC.5216'?>
	<?rfc include='reference.RFC.5280'?>
	<?rfc include='reference.RFC.5705'?>
	<?rfc include='reference.RFC.6066'?>
	<?rfc include='reference.RFC.6960'?>
	<?rfc include='reference.RFC.7542'?>
	<?rfc include='reference.RFC.7924'?>
	<?rfc include='reference.RFC.8126'?>
	<?rfc include='reference.RFC.8174'?>
	<?rfc include='reference.RFC.8446'?>
</references>

<references title='Informative references'>
	<reference anchor="IEEE-802.1X">
	   <front>
	     <title>IEEE Standard for Local and metropolitan area networks -- Port-Based Network Access Control</title>
	     <author>
	       <organization>Institute of Electrical and Electronics Engineers</organization>
	       </author>
	     <date month="February" year="2010" />
	   </front>
	   <seriesInfo name="IEEE Standard 802.1X-2010" value="" />
	</reference>
	<reference anchor="IEEE-802.11">
	   <front>
	     <title>IEEE Standard for Information technologyâ€”Telecommunications and information exchange between systems Local and metropolitan area networksâ€”Specific requirements - Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications</title>
	     <author>
	       <organization>Institute of Electrical and Electronics Engineers</organization>
	       </author>
	     <date month="December" year="2016" />
	   </front>
	   <seriesInfo name="IEEE Std 802.11-2016 (Revision of IEEE Std 802.11-2012)" value="" />
	</reference>
	<reference anchor="IEEE-802.1AE">
	   <front>
	     <title>IEEE Standard for Local and metropolitan area networks -- Media Access Control (MAC) Security</title>
	     <author>
	       <organization>Institute of Electrical and Electronics Engineers</organization>
	       </author>
	     <date month="December" year="2018" />
	   </front>
	   <seriesInfo name="IEEE Standard 802.1AE-2018" value="" />
	</reference>
	<reference anchor="TS.33.501">
	   <front>
	     <title>Security architecture and procedures for 5G System</title>
	     <author>
	       <organization>3GPP</organization>
	       </author>
	     <date month="July" year="2020" />
	   </front>
	   <seriesInfo name="3GPP TS" value="33.501 16.3.0" />
	</reference>
	<reference anchor="MulteFire">
	   <front>
	     <title>MulteFire Release 1.1 specification</title>
	     <author>
	       <organization>MulteFire</organization>
	       </author>
	     <date year="2019" />
	   </front>
	</reference>
	<reference anchor="PEAP">
	   <front>
	     <title>[MS-PEAP]: Protected Extensible Authentication Protocol (PEAP)</title>
	     <author>
	       <organization>Microsoft Corporation</organization>
	       </author>
	     <date year="2019" />
	   </front>
	</reference>
	<?rfc include='reference.RFC.1661'?>	
	<?rfc include='reference.RFC.2246'?>
	<?rfc include='reference.RFC.2560'?>
	<?rfc include='reference.RFC.2865'?>
	<?rfc include='reference.RFC.3280'?>
	<?rfc include='reference.RFC.4282'?>
	<?rfc include='reference.RFC.4346'?>
	<?rfc include='reference.RFC.4366'?>
	<?rfc include='reference.RFC.4851'?>
	<?rfc include='reference.RFC.5077'?>	
	<?rfc include='reference.RFC.5191'?>
	<?rfc include='reference.RFC.5246'?>
	<?rfc include='reference.RFC.5247'?>
	<?rfc include='reference.RFC.5281'?>
	<?rfc include='reference.RFC.6733'?>
	<?rfc include='reference.RFC.7170'?>
	<?rfc include='reference.RFC.7406'?>
	<?rfc include='reference.RFC.7457'?>
	<?rfc include='reference.RFC.7525'?>	
	<?rfc include='reference.I-D.ietf-tls-certificate-compression'?>
	<?rfc include='reference.I-D.ietf-tls-oldversions-deprecate'?>	
	<?rfc include='reference.I-D.ietf-emu-eaptlscert'?>	
</references>

<section title="Updated references">
	<t>
	All the following references in <xref target="RFC5216"/> are updated as specified below when EAP-TLS is used with TLS 1.3 or higher.
	</t>

	<t>
	All references to <xref target="RFC2560"/> are updated with <xref target="RFC6960"/>.
	</t>

	<t>
	All references to <xref target="RFC3280"/> are updated with <xref target="RFC5280"/>.
	</t>

	<t>
	All references to <xref target="RFC4282"/> are updated with <xref target="RFC7542"/>.
	</t>
</section>

<section title="Acknowledgments" numbered="false">
	<t>
	The authors want to thank Bernard Aboba, Jari Arkko, Alan DeKok, Ari Keraenen, Jouni Malinen, Oleg Pekar, Eric Rescorla, Jim Schaad, Terry Burton, and Vesa Torvinen for comments and suggestions on the draft.
	</t>
</section>

<section title="Contributors" numbered="false">
	<t>
	Alan DeKok, FreeRADIUS
	</t>
</section>

</back>

</rfc>
